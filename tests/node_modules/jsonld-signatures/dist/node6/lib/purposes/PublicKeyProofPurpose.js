/*!
 * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const ControllerProofPurpose = require('./ControllerProofPurpose');

module.exports = class PublicKeyProofPurpose extends ControllerProofPurpose {
  constructor({
    controller,
    date,
    maxTimestampDelta = Infinity
  } = {}) {
    super({
      term: 'publicKey',
      controller,
      date,
      maxTimestampDelta
    });
  }

  update(proof) {
    return _asyncToGenerator(function* () {
      // do not add `term` to proof
      return proof;
    })();
  }

  match(proof) {
    return _asyncToGenerator(function* () {
      // `proofPurpose` must not be present in the proof to match as this
      // proof purpose is a legacy, non-descript purpose for signing
      return proof.proofPurpose === undefined;
    })();
  }

};