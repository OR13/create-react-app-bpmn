/*!
 * Copyright (c) 2010-2018 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';
/* Core API */

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const api = {};
module.exports = api;
/* API Constants */

const constants = require('./constants');

Object.assign(api, constants); // TODO: support `ProofChain`

const ProofSet = require('./ProofSet');

api.sign =
/*#__PURE__*/
function () {
  var _sign = _asyncToGenerator(function* (document, {
    suite,
    purpose,
    documentLoader,
    expansionMap,
    compactProof
  } = {}) {
    try {
      return yield new ProofSet().add(document, {
        suite,
        purpose,
        documentLoader,
        expansionMap,
        compactProof
      });
    } catch (e) {
      if (!documentLoader && e.name === 'jsonld.InvalidUrl') {
        const {
          details: {
            url
          }
        } = e;
        const err = new Error(`A URL "${url}" could not be fetched; you need to pass ` + '"documentLoader" or resolve the URL before calling "sign".');
        err.cause = e;
        throw err;
      }

      throw e;
    }
  });

  function sign(_x) {
    return _sign.apply(this, arguments);
  }

  return sign;
}();

api.verify =
/*#__PURE__*/
function () {
  var _verify = _asyncToGenerator(function* (document, {
    suite,
    purpose,
    documentLoader,
    expansionMap,
    compactProof
  } = {}) {
    const result = yield new ProofSet().verify(document, {
      suite,
      purpose,
      documentLoader,
      expansionMap,
      compactProof
    });

    if (!documentLoader && result.error) {
      const {
        error
      } = result;

      if (error.name === 'jsonld.InvalidUrl') {
        const {
          details: {
            url
          }
        } = error;
        const err = new Error(`A URL "${url}" could not be fetched; you need to pass ` + '"documentLoader" or resolve the URL before calling "verify".');
        err.cause = error;
        result.error = err;
      }
    }

    return result;
  });

  function verify(_x2) {
    return _verify.apply(this, arguments);
  }

  return verify;
}(); // expose suite classes


api.suites = require('./suites').suites; // expose ProofPurpose classes to enable extensions

api.purposes = require('./purposes').purposes; // expose LDKeyPair classes

Object.assign(api, require('./LDKeyPair')); // expose document loader helpers

Object.assign(api, require('./documentLoader'));