/*!
 * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports = class LinkedDataProof {
  constructor({
    type
  } = {}) {
    if (typeof type !== 'string') {
      throw new TypeError('A LinkedDataProof must have a "type".');
    }

    this.type = type;
  }
  /**
   * @param document {object} to be signed.
   * @param purpose {ProofPurpose}
   * @param documentLoader {function}
   * @param expansionMap {function}
   * @param compactProof {boolean}
   *
   * @returns {Promise<object>} Resolves with the created proof object.
   */


  createProof({
    document,
    purpose,
    documentLoader,
    expansionMap,
    compactProof
  }) {
    return _asyncToGenerator(function* () {
      throw new Error('"createProof" must be implemented in a derived class.');
    })();
  }
  /**
   * @param proof {object} the proof to be verified.
   * @param document {object} the document the proof applies to.
   * @param purpose {ProofPurpose}
   * @param documentLoader {function}
   * @param expansionMap {function}
   *
   * @returns {Promise<{object}>} Resolves with the verification result.
   */


  verifyProof({
    proof,
    document,
    purpose,
    documentLoader,
    expansionMap
  }) {
    return _asyncToGenerator(function* () {
      throw new Error('"verifyProof" must be implemented in a derived class.');
    })();
  }
  /**
   * @param proof {object} the proof to be matched.
   * @param document {object} the document the proof applies to.
   * @param purpose {ProofPurpose}
   * @param documentLoader {function}
   * @param expansionMap {function}
   *
   * @returns {Promise<{boolean}>} Resolves with the verification result.
   */


  matchProof({
    proof,
    document,
    purpose,
    documentLoader,
    expansionMap
  }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return proof.type === _this.type;
    })();
  }

};