/*!
 * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.
 */
'use strict'; // load locally embedded contexts

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const contexts = require('./contexts');

const api = {};
module.exports = api;

api.extendContextLoader = documentLoader => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (url) {
        const context = contexts[url];

        if (context !== undefined) {
          return {
            contextUrl: null,
            documentUrl: url,
            document: context
          };
        }

        return documentLoader(url);
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

api.strictDocumentLoader = api.extendContextLoader(url => {
  throw new Error(`${url} not found.`);
});